#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Pose, PoseStamped
from gazebo_msgs.srv import SpawnModel
from nav_msgs.msg import Path
from visualization_msgs.msg import Marker, MarkerArray

class PathPlanner:
    def __init__(self):
        self.rate = rospy.Rate(30)

        self.path_msg = None
        self.n_steps = 2
        self.path_pub = rospy.Publisher('/path', Path, queue_size=10)
        self.marker_array = None
        # self.marker_pub = rospy.Publisher('/markers', MarkerArray, queue_size=10)

        # self.start_x, self.start_y, self.start_z = 1.0, 1.0, 0.002566
        # rospy.loginfo("Initial pose set to x: {}, y: {}, z: {}".format(self.start_x, self.start_y, self.start_z))

        # self.goal_x, self.goal_y, self.goal_z = 1.0, 0.0, self.start_z
        # rospy.loginfo("Initial pose set to x: {}, y: {}, z: {}".format(self.goal_x, self.goal_y, self.goal_z))

        self.path_msg = None

    def run(self):
        while not rospy.is_shutdown():
            if self.path_msg is None:
                self.path_published = True
                self.path_msg = self.generate_path()
                rospy.loginfo("New Path published with {} steps.".format(len(self.path_msg.poses)))

            # self.marker_pub.publish(self.marker_array)
            self.path_pub.publish(self.path_msg)
            self.rate.sleep()

    def generate_path(self):
        path_msg = Path()
        path_msg.header.frame_id = "path_planner"
        path_msg.header.stamp = rospy.Time.now()

        # marker_array = None # MarkerArray()
        trajectory = [[0.0, -0.0, 0.0], [0.4950813837155965, 0.0002547887961875119, 0.0021622613513301494], [0.9982726849068438, 0.0056820013761280435, 0.008019814119642137], [1.5000274952496726, 0.0059424162043407655, 0.010366395805683198], [1.9714437957699504, 0.012072826164266363, 0.017691995618773503], [2.4978684260880795, 0.011601311998705278, 0.02386450425538476], [3.010815767380653, 0.01801527128027971, 0.03445721142353303], [3.507063998218958, 0.01701233281058208, 0.038337927578102234], [4.012620624170714, 0.024100599226699392, 0.045395340010689886], [4.514833598833565, 0.02495601111254716, 0.049133835162865874], [5.017161220493318, 0.03149524423866552, 0.05523633716707353], [5.51940086207554, 0.030085354586579783, 0.0629749739561262], [6.03533332268388, 0.033231232243281575, 0.07405741372199495], [6.537391640025451, 0.03051862039002601, 0.08446890058718093], [7.048671047316283, 0.038067441674022755, 0.09575308668400331], [7.55109590134654, 0.03431035592675249, 0.10149061037170799], [8.059086339126619, 0.042729229684233254, 0.10987290009657202], [8.52910950102711, 0.0361088815813233, 0.11378430761802129], [9.057420775293076, 0.04137374154529525, 0.11942084703760691], [9.56262721211865, 0.03109799109499287, 0.12977970617751178], [10.063355428131272, 0.031333084537993515, 0.14035971143267495], [10.564434359898204, 0.017195610432229166, 0.1523663378360089], [11.067897560093263, 0.015964352684473423, 0.16406888445093548], [11.538305780022156, -0.005298283878670548, 0.1742140300896913], [12.075701271632234, -0.013420317597075168, 0.18348975369247966], [12.57096145582652, -0.03554497226615074, 0.19262208554922391], [13.056727974695047, -0.049523833398930905, 0.20499172623121895], [13.57320019988525, -0.07404168277320623, 0.2147168274517664], [14.071046794195906, -0.07897020052519861, 0.2226606968611588], [14.538997968829394, -0.10256663521468153, 0.23212175013944475], [15.065563638878904, -0.1167763891342656, 0.2408806359762134], [15.55517235904856, -0.14451920391994882, 0.25216240490966046], [16.060878282608606, -0.16233348628138394, 0.2632859326068148], [16.56483257931331, -0.19450740003278352, 0.2759509621400748], [17.07504346354488, -0.20961007460225636, 0.2872020973948639], [17.570511139964328, -0.24407735023413227, 0.2988333759290186], [18.080854607007407, -0.26610472918341704, 0.31079787209427323], [18.59049646081564, -0.30203120166074393, 0.32420489211775605], [19.084604904329886, -0.32645382033607545, 0.34009129336809085], [19.63586747214387, -0.3657491267911684, 0.36160403574838995], [20.150774198207014, -0.3911628434767098, 0.3794843533824954], [20.666409031086534, -0.4277895374294906, 0.3966498889678393], [21.180019483939088, -0.458788621000815, 0.40918684690405555], [21.70154365867492, -0.490295037823036, 0.4215196756925751], [22.215836213869263, -0.5137219901398054, 0.43110400157805046], [22.728543128259094, -0.5469874293170292, 0.43765565801467715], [23.241384685764114, -0.571926428598341, 0.44717513184957286], [23.767547695050713, -0.6043245975304662, 0.461574553355278], [24.28656672722109, -0.6346200237378623, 0.4724674608211735], [24.809254106414958, -0.6666944983890827, 0.4837900904850035], [25.32670419066385, -0.6950365293779399, 0.49242971573187705], [25.821659469023185, -0.7245096058611247, 0.501958900633962], [26.370683105552995, -0.7502297676767269, 0.5119963762627946], [26.89741612568614, -0.7821684517861108, 0.5221244715437666], [27.398996546439875, -0.8079249885664631, 0.5315545062900925], [27.948541952161346, -0.8422125069605737, 0.5412863716179301], [28.473985439321677, -0.8667390346179196, 0.5504376709603114], [28.973416127630998, -0.8956524219968989, 0.5591793882574851], [29.520360419055418, -0.9238145692677926, 0.5670525689197388], [30.058969038298454, -0.9543859547220845, 0.5786333952064608]]
        
        for point in trajectory:
            x, y, z = point[0], point[1], point[2]

            pose = PoseStamped()
            pose.header.frame_id = "path_planner"
            pose.header.stamp = rospy.Time.now()
            pose.pose.position.x = x
            pose.pose.position.y = y
            pose.pose.orientation.w = 1.0

            path_msg.poses.append(pose)

            ####################################
            #  MARKERS
            ###################################
            # marker = Marker()
            # marker.header.frame_id = "path_planner"
            # marker.header.stamp = rospy.Time.now()
            # marker.ns = "path_spheres"
            # marker.id = i
            # marker.type = Marker.SPHERE
            # marker.action = Marker.ADD
            # marker.pose.position.x = x
            # marker.pose.position.y = y
            # marker.pose.position.z = self.start_z       # Plain-> all same z
            # marker.pose.orientation.w = 1.0
            # marker.scale.x = 0.1 
            # marker.scale.y = 0.1
            # marker.scale.z = 0.1
            # marker.color.a = 1.0
            # marker.color.r = 1.0
            # marker.color.g = 0.0
            # marker.color.b = 0.0

            # marker_array.markers.append(marker)

        return path_msg

if __name__ == '__main__':
    try:
        rospy.init_node('path_planner', anonymous=True)
        planner = PathPlanner()
        planner.run()
    except rospy.ROSInterruptException:
        pass

